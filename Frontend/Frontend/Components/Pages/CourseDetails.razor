@page "/coursesdetails/{Id}"


@using Microsoft.AspNetCore.Authorization
@using Frontend.Models
@using System.Text.Json
@inject HttpClient Http

@attribute [Authorize]


<h1>This Is coursesdetails Page</h1>

@* <section class="coursedetails">
    @if (course?.ImgHeaderUrl != null)
    {
        <div class="backgroundImage" style="background-image: url('@course.ImgHeaderUrl');"></div>
    }
    <div class="container">
        @if (course == null)
        {
            <div><i class="fas fa-spinner-third fa-spin"></i></div>
        }
        else
        {
            <div class="ImageHeadline">
                <div class="navigationContainer">
                    <nav class="navigation">
                        <a href="/"><i class="fas fa-home"></i> Home</a>
                        <p> >> </p>
                        <a href="/courses">Courses</a>
                        <p> >> </p>
                        <a href="/courses/details/@Id">@course.Title</a>
                    </nav>
                </div>
                <div class="ImageHeadlineContainer">
                    <div class="marks">
                        @if (course.IsBestseller == true)
                        {
                            <div class="best-seller"><p>Best Seller</p></div>
                        }
                        @if (course.IsDigital == true)
                        {
                            <div class="digital-container"><p>Digital</p></div>
                        }
                    </div>
                    <div class="h1-courses">@course.Title</div>
                    <p class="underline">@course.Ingress</p>
                </div>
                @{
                    var numberOfStars = course.StarRating;
                    var numberOfEmptyStars = 5 - numberOfStars;
                }
                <div class="likesAndTeacher">
                    <div class="timeAndLikesParent">
                        <div class="timeAndLikesChild">
                            @for (int i = 0; i < numberOfStars; i++)
                            {
                                <i class="fas fa-star"></i>
                            }
                            @for (int i = 0; i < numberOfEmptyStars; i++)
                            {
                                <i class="far fa-star"></i>
                            }
                            <p>(@course.Reviews) reviews</p>
                        </div>
                        <div class="verticalborder"></div>
                        <div class="timeAndLikesChild">
                            <p class="p-timeAndLikes"><i class="fas fa-thumbs-up"></i>@course.Likes</p>
                        </div>
                        <div class="verticalborder"></div>
                        <div class="timeAndLikesChild">
                            <p class="p-timeAndLikes"><i class="fas fa-clock"></i>@course.Hours Hours </p>
                        </div>
                    </div>
                    <div class="courseLeader-container">
                        @{
                            var author = course?.Authors?.FirstOrDefault();
                        }
                        @if (author?.AuthorImage == null)
                        {
                            <img class="imageTeacher" src="/images/avatar.jpg" />
                        }
                        else
                        {
                            <img class="imageTeacher" src="@author.AuthorImage" />
                        }
                        <div class="nameContainer">
                            <b>Created by</b>
                            <p class="p">@author?.Name</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="CourseDetails">
                <div class="line"></div>
                <div class="courseDescription">
                    <h1 class="HeadLine">Course Description</h1>
                    <p>@course?.AuthorName</p>
                </div>
                <div class="whatYouLearn">
                    <h3 class="HeadLine">What you'll learn</h3>
                    <ul>
                        @if (course?.Discriminator != null)
                        {
                            @foreach (var learnItem in course.Discriminator)
                            {
                                <li>
                                    <div class="containerContent">
                                        <p> @learnItem</p>
                                    </div>
                                </li>
                            }
                        }
                    </ul>
                </div>
                <div class="joinCourse" novalidate>
                    <h5>This course includes:</h5>
                    <ul>
                        <div class="containerContent">
                            <ul>
                                @foreach (var include in course?.AuthorDescription!)
                                {
                                    <li class="content"> @include</li>
                                }
                            </ul>
                        </div>
                    </ul>
                    <div class="price">
                        @if (course.Discount == null)
                        {
                            <div class="Price">@course.Price</div>
                        }
                        else
                        {
                            <div class="Price">@course.Discount</div>
                            <div class="orgPrice">@course.Price</div>
                        }
                    </div>
                    <button class="btn-theme-s" type="submit">Join course</button>
                </div>
            </div>
            <div class="ProgramDetails">
                <div class="HeadlineProgramDetails">
                    <h1>Program Details</h1>
                </div>
                <div class="contentContainer">
                    @if (course.ProgramDetails != null)
                    {
                        var numberOfItems = 0;
                        var totalItems = course.ProgramDetails.Count();
                        foreach (var item in course.ProgramDetails)
                        {
                            numberOfItems++;
                            <div class="boxContainer">
                                <div class="numberContainer">
                                    <div class="outerCircle">
                                        <div class="innerCircle">
                                            <h3>
                                                @numberOfItems
                                            </h3>
                                        </div>
                                    </div>
                                    @if (numberOfItems != totalItems)
                                    {
                                        <div class="line"></div>
                                    }
                                </div>
                                <div class="textContainerProgramDetails">
                                    <h5>@item.Title</h5>
                                    <p>@item.Description</p>
                                </div>
                            </div>
                        }
                    }
                </div>
                <div class="line"></div>
            </div>
        }
    </div>
</section>
 *@

@code {

    [Parameter]
    public string? Id { get; set; }

    private CourseModel? course;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"Course ID: {Id}");

        var query = new GraphQLQuery
            {
                Query = $"{{ getCoursesById(id: \"{Id}\") {{ title ingress isDigital reviews isBestSeller imgHeaderUrl starRating likes likePercentage hours Content {{ description includes ProgramDetails {{ id description title }} }} Authors {{ id authorName authorImageUrl }} Prices {{ price discount }} }} }}"
            };

        var response = await Http.PostAsJsonAsync("https://courseprovider-nor.azurewebsites.net/api/graphql?", query);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
            if (result?.Data != null && result.Data.TryGetProperty("getCoursesById", out JsonElement courseData))
            {
                Console.WriteLine("GraphQL response received successfully."); // التحقق من استلام الرد بنجاح

                course = new CourseModel
                    {
                        Title = courseData.GetProperty("title").GetString() ?? string.Empty,
                        Ingress = courseData.GetProperty("ingress").GetString() ?? string.Empty,
                        IsBestseller = courseData.GetProperty("isBestSeller").GetBoolean(),
                        IsDigital = courseData.GetProperty("isDigital").GetBoolean(),
                        ImgHeaderUrl = courseData.GetProperty("imgHeaderUrl").GetString() ?? string.Empty,
                        Reviews = courseData.GetProperty("reviews").GetString() ?? string.Empty,
                        Hours = courseData.GetProperty("hours").GetString() ?? string.Empty,
                        Likes = courseData.GetProperty("likes").GetString() ?? string.Empty,
                        LikePercentage = courseData.GetProperty("likePercentage").GetString() ?? string.Empty,
                        StarRating = courseData.GetProperty("starRating").GetDouble(),
                        Authors = courseData.GetProperty("Authors").ValueKind == JsonValueKind.Array
                                ? courseData.GetProperty("Authors").EnumerateArray().Select(author => new AuthorModel
                                {
                                    Id = author.GetProperty("id").GetInt32(),
                                    Name = author.GetProperty("authorName").GetString() ?? string.Empty,
                                    AuthorImage = author.GetProperty("authorImageUrl").GetString() ?? string.Empty
                                }).ToList()
                                : new List<AuthorModel>(),
                        Price = courseData.GetProperty("Prices").GetProperty("price").GetString() ?? string.Empty,
                        Discount = courseData.GetProperty("Prices").GetProperty("discount").GetString() ?? string.Empty,
                        CourseDescription = courseData.GetProperty("Content").GetProperty("description").GetString() ?? string.Empty,
                        ProgramDetails = courseData.GetProperty("Content").GetProperty("ProgramDetails").ValueKind == JsonValueKind.Array
                                ? courseData.GetProperty("Content").GetProperty("ProgramDetails").EnumerateArray().Select(item => new ProgramDetail
                                {
                                    Id = item.GetProperty("id").GetInt32(),
                                    Description = item.GetProperty("description").GetString() ?? string.Empty,
                                    Title = item.GetProperty("title").GetString() ?? string.Empty
                                }).ToList()
                                : new List<ProgramDetail>()
                    };
            }
            else
            {
                Console.WriteLine("Failed to get course data from GraphQL response.");
            }
        }
        else
        {
            Console.WriteLine($"GraphQL request failed with status code: {response.StatusCode}");
        }
    }
}

